// Automatically generated by service-generator.js, don't change!
import { BaseService } from './base-service';

/**
 * Volume related controls
 *
 * @export
 * @class RenderingControlService
 * @extends {BaseService}
 */
export class RenderingControlService extends BaseService {
  readonly serviceNane: string = 'RenderingControl';
  readonly controlUrl: string = '/MediaRenderer/RenderingControl/Control';  
  readonly eventSubUrl: string = '/MediaRenderer/RenderingControl/Event';
  readonly scpUrl: string = '/xml/RenderingControl1.xml';

  //#region methods
  async GetBass(input: { InstanceID: number } = { InstanceID: 0 }):
    Promise<GetBassResponse>{ return await this.SoapRequestWithBody<typeof input, GetBassResponse>('GetBass', input); }

  async GetEQ(input: { InstanceID: number; EQType: string }):
    Promise<GetEQResponse>{ return await this.SoapRequestWithBody<typeof input, GetEQResponse>('GetEQ', input); }

  async GetHeadphoneConnected(input: { InstanceID: number } = { InstanceID: 0 }):
    Promise<GetHeadphoneConnectedResponse>{ return await this.SoapRequestWithBody<typeof input, GetHeadphoneConnectedResponse>('GetHeadphoneConnected', input); }

  async GetLoudness(input: { InstanceID: number; Channel: string }):
    Promise<GetLoudnessResponse>{ return await this.SoapRequestWithBody<typeof input, GetLoudnessResponse>('GetLoudness', input); }

  async GetMute(input: { InstanceID: number; Channel: string }):
    Promise<GetMuteResponse>{ return await this.SoapRequestWithBody<typeof input, GetMuteResponse>('GetMute', input); }

  async GetOutputFixed(input: { InstanceID: number } = { InstanceID: 0 }):
    Promise<GetOutputFixedResponse>{ return await this.SoapRequestWithBody<typeof input, GetOutputFixedResponse>('GetOutputFixed', input); }

  async GetRoomCalibrationStatus(input: { InstanceID: number } = { InstanceID: 0 }):
    Promise<GetRoomCalibrationStatusResponse>{ return await this.SoapRequestWithBody<typeof input, GetRoomCalibrationStatusResponse>('GetRoomCalibrationStatus', input); }

  async GetSupportsOutputFixed(input: { InstanceID: number } = { InstanceID: 0 }):
    Promise<GetSupportsOutputFixedResponse>{ return await this.SoapRequestWithBody<typeof input, GetSupportsOutputFixedResponse>('GetSupportsOutputFixed', input); }

  async GetTreble(input: { InstanceID: number } = { InstanceID: 0 }):
    Promise<GetTrebleResponse>{ return await this.SoapRequestWithBody<typeof input, GetTrebleResponse>('GetTreble', input); }

  async GetVolume(input: { InstanceID: number; Channel: string }):
    Promise<GetVolumeResponse>{ return await this.SoapRequestWithBody<typeof input, GetVolumeResponse>('GetVolume', input); }

  async GetVolumeDB(input: { InstanceID: number; Channel: string }):
    Promise<GetVolumeDBResponse>{ return await this.SoapRequestWithBody<typeof input, GetVolumeDBResponse>('GetVolumeDB', input); }

  async GetVolumeDBRange(input: { InstanceID: number; Channel: string }):
    Promise<GetVolumeDBRangeResponse>{ return await this.SoapRequestWithBody<typeof input, GetVolumeDBRangeResponse>('GetVolumeDBRange', input); }

  async RampToVolume(input: { InstanceID: number; Channel: string; RampType: string; DesiredVolume: number; ResetVolumeAfter: boolean; ProgramURI: string }):
    Promise<RampToVolumeResponse>{ return await this.SoapRequestWithBody<typeof input, RampToVolumeResponse>('RampToVolume', input); }

  async ResetBasicEQ(input: { InstanceID: number } = { InstanceID: 0 }):
    Promise<ResetBasicEQResponse>{ return await this.SoapRequestWithBody<typeof input, ResetBasicEQResponse>('ResetBasicEQ', input); }

  async ResetExtEQ(input: { InstanceID: number; EQType: string }):
    Promise<boolean> { return await this.SoapRequestWithBodyNoResponse<typeof input>('ResetExtEQ', input); }

  async RestoreVolumePriorToRamp(input: { InstanceID: number; Channel: string }):
    Promise<boolean> { return await this.SoapRequestWithBodyNoResponse<typeof input>('RestoreVolumePriorToRamp', input); }

  async SetBass(input: { InstanceID: number; DesiredBass: number }):
    Promise<boolean> { return await this.SoapRequestWithBodyNoResponse<typeof input>('SetBass', input); }

  async SetChannelMap(input: { InstanceID: number; ChannelMap: string }):
    Promise<boolean> { return await this.SoapRequestWithBodyNoResponse<typeof input>('SetChannelMap', input); }

  async SetEQ(input: { InstanceID: number; EQType: string; DesiredValue: number }):
    Promise<boolean> { return await this.SoapRequestWithBodyNoResponse<typeof input>('SetEQ', input); }

  async SetLoudness(input: { InstanceID: number; Channel: string; DesiredLoudness: boolean }):
    Promise<boolean> { return await this.SoapRequestWithBodyNoResponse<typeof input>('SetLoudness', input); }

  async SetMute(input: { InstanceID: number; Channel: string; DesiredMute: boolean }):
    Promise<boolean> { return await this.SoapRequestWithBodyNoResponse<typeof input>('SetMute', input); }

  async SetOutputFixed(input: { InstanceID: number; DesiredFixed: boolean }):
    Promise<boolean> { return await this.SoapRequestWithBodyNoResponse<typeof input>('SetOutputFixed', input); }

  async SetRelativeVolume(input: { InstanceID: number; Channel: string; Adjustment: number }):
    Promise<SetRelativeVolumeResponse>{ return await this.SoapRequestWithBody<typeof input, SetRelativeVolumeResponse>('SetRelativeVolume', input); }

  async SetRoomCalibrationStatus(input: { InstanceID: number; RoomCalibrationEnabled: boolean }):
    Promise<boolean> { return await this.SoapRequestWithBodyNoResponse<typeof input>('SetRoomCalibrationStatus', input); }

  async SetRoomCalibrationX(input: { InstanceID: number; CalibrationID: string; Coefficients: string; CalibrationMode: string }):
    Promise<boolean> { return await this.SoapRequestWithBodyNoResponse<typeof input>('SetRoomCalibrationX', input); }

  async SetTreble(input: { InstanceID: number; DesiredTreble: number }):
    Promise<boolean> { return await this.SoapRequestWithBodyNoResponse<typeof input>('SetTreble', input); }

  async SetVolume(input: { InstanceID: number; Channel: string; DesiredVolume: number }):
    Promise<boolean> { return await this.SoapRequestWithBodyNoResponse<typeof input>('SetVolume', input); }

  async SetVolumeDB(input: { InstanceID: number; Channel: string; DesiredVolume: number }):
    Promise<boolean> { return await this.SoapRequestWithBodyNoResponse<typeof input>('SetVolumeDB', input); }
  //#endregion
}

// Generated responses
export interface GetBassResponse {
  CurrentBass: number;
}

export interface GetEQResponse {
  CurrentValue: number;
}

export interface GetHeadphoneConnectedResponse {
  CurrentHeadphoneConnected: boolean;
}

export interface GetLoudnessResponse {
  CurrentLoudness: boolean;
}

export interface GetMuteResponse {
  CurrentMute: boolean;
}

export interface GetOutputFixedResponse {
  CurrentFixed: boolean;
}

export interface GetRoomCalibrationStatusResponse {
  RoomCalibrationEnabled: boolean;
  RoomCalibrationAvailable: boolean;
}

export interface GetSupportsOutputFixedResponse {
  CurrentSupportsFixed: boolean;
}

export interface GetTrebleResponse {
  CurrentTreble: number;
}

export interface GetVolumeResponse {
  CurrentVolume: number;
}

export interface GetVolumeDBResponse {
  CurrentVolume: number;
}

export interface GetVolumeDBRangeResponse {
  MinValue: number;
  MaxValue: number;
}

export interface RampToVolumeResponse {
  RampTime: number;
}

export interface ResetBasicEQResponse {
  Bass: number;
  Treble: number;
  Loudness: boolean;
  LeftVolume: number;
  RightVolume: number;
}

export interface SetRelativeVolumeResponse {
  NewVolume: number;
}
